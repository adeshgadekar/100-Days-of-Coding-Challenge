Binary Array Sorting

Given a binary array A[] of size N. The task is to arrange the array in increasing order.
Note: The binary array contains only 0  and 1.
 

Example 1:

Input: 
5
1 0 1 1 0

Output: 
0 0 1 1 1

Explanation: 
After arranging the elements in 
increasing order, elements will be as 
0 0 1 1 1.
Example 2:

Input:
10
1 0 1 1 1 1 1 0 0 0

Output: 
0 0 0 0 1 1 1 1 1 1

Explanation: 
After arranging the elements in 
increasing order, elements will be 
0 0 0 0 1 1 1 1 1 1.


Solution : 

class Solution
{
    //Function to sort the binary array.
    static void binSort(int A[], int N)
    {
        int count =0;
        for(int i=0;i<N;++i)
        {
            if(A[i]==0)
                ++count;
        }
        
        for(int i=0;i<N;++i)
        {
            if(count>0)
            {
                A[i]=0;
                --count;
            }
            else {
                A[i]=1;
            }
        }
        
        
        /**************
        * No need to print the array
        * ************/
    }
}

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


LCM And GCD

Given two numbers A and B. The task is to find out their LCM and GCD.

 

Example 1:

Input:
A = 5 , B = 10
Output:
10 5
Explanation:
LCM of 5 and 10 is 10, while
thier GCD is 5.
Example 2:

Input:
A = 14 , B = 8
Output:
56 2
Explanation:
LCM of 14 and 8 is 56, while
thier GCD is 2.


Solution  : 

class Solution {
    static Long[] lcmAndGcd(Long A , Long B) {
        Long[] result = new Long[2];
        result[1] = gcd(A, B);
        result[0] = (A * B) / result[1];
        return result;
    }

    static Long gcd(Long a, Long b) {
        if (b == 0) {
            return a;
        }
        return gcd(b, a % b);
    }
};
