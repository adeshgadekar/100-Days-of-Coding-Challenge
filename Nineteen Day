Count nodes of linked list

Given a singly linked list. The task is to find the length of the linked list, where length is defined as the number of nodes in the linked list.

Example 1:

Input:
LinkedList: 1->2->3->4->5
Output: 5
Explanation: Count of nodes in the 
linked list is 5, which is its length.
Example 2:

Input:
LinkedList: 2->4->6->7->5->1->0
Output: 7
Explanation: Count of nodes in the
linked list is 7. Hence, the output
is 7.


Solution : 

class Solution
{
    //Function to count nodes of a linked list.
    public static int getCount(Node head)
    {
        
        int count = 0 ;
        Node curr= head;
        while(curr!=null){
            curr = curr.next;
            count++;
        }
        return count;
    }
}


++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++



Preorder Traversal

Given a binary tree, find its preorder traversal.

Example 1:

Input:
        1      
      /          
    4    
  /    \   
4       2
Output: 1 4 4 2 
Example 2:

Input:
       6
     /   \
    3     2
     \   / 
      1 2
Output: 6 3 1 2 2 


Solution : 

class BinaryTree
{
    //Function to return a list containing the preorder traversal of the tree.
    static ArrayList<Integer> preorder(Node root)
    {
        ArrayList<Integer> list= new ArrayList<>();
        preOrder(root,list);
        return list;
    }
    
    
    public static void preOrder(Node root , ArrayList<Integer> list){
        if(root==null)
        return;
        
        list.add(root.data);
        preOrder(root.left,list);
        preOrder(root.right,list);
    }
}
