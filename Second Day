Max sum path in two arrays

Given two sorted arrays A and B of size M and N respectively. Each array may have some elements in common with the other array.
Find the maximum sum of a path from the beginning of any array to the end of any of the two arrays.
We can switch from one array to another array only at the common elements.Both the arrays are sorted.

Example 1:

Input:
M = 5, N = 4
A[] = {2,3,7,10,12}
B[] = {1,5,7,8}
Output: 35
Explanation: The path will be 1+5+7+10+12
= 35.

Solution  :

class Solution
{
    /*You are required to complete this method
    * ar1 : 1st array
    * ar2 : 2nd array
    */
    int maxPathSum(int A[], int B[])
    {
        int m = A.length;
        int n = B.length;
        int i = 0, j = 0;
        int sumA = 0, sumB = 0, result = 0;

        while (i < m && j < n) {
            if (A[i] < B[j]) {
                sumA += A[i++];
            } else if (A[i] > B[j]) {
                sumB += B[j++];
            } else {
                result += Math.max(sumA, sumB) + A[i];
                sumA = 0;
                sumB = 0;
                i++;
                j++;
            }
        }

        while (i < m) {
            sumA += A[i++];
        }

        while (j < n) {
            sumB += B[j++];
        }

        result += Math.max(sumA, sumB);
        return result;
    }
}
