Identical Linked Lists

Given two Singly Linked List of N and M nodes respectively. The task is to check whether two linked lists are identical or not. 
Two Linked Lists are identical when they have same data and with same arrangement too.

Example 1:

Input:
LinkedList1: 1->2->3->4->5->6
LinkedList2: 99->59->42->20
Output: Not identical 
Example 2:

Input:
LinkedList1: 1->2->3->4->5
LinkedList2: 1->2->3->4->5
Output: Identical


Solution : 

class Solution {
    
    //Function to check whether two linked lists are identical or not.
    public boolean isIdentical (Node head1, Node head2){
        Node temp1 = head1;
        Node temp2 = head2;
        
        while(temp1 != null && temp2 != null)
        {
            if(temp1.data != temp2.data)
            return false;
            
            temp1 = temp1.next;
            temp2 = temp2.next;
        }
        
        if(temp1 != null || temp2 != null)
        return false;
        
        return true;
    }
}


+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


Postorder Traversal

Given a binary tree, find the Postorder Traversal of it.
For Example, the postorder traversal of the following tree is:
5 10 39 1

        1
     /     \
   10     39
  /
5


Example 1:

Input:
        19
     /     \
    10      8
  /    \
 11    13
Output: 11 13 10 8 19
Example 2:

Input:
          11
         /
       15
      /
     7
Output: 7 15 11


Solution  : 

class Tree
{
    
    static void helper(ArrayList<Integer> list , Node root){
        if(root == null)return;
        helper(list,root.left);
        helper(list,root.right);
        list.add(root.data);
        return;
    }
    
    ArrayList<Integer> postOrder(Node root)
    {
       
       ArrayList<Integer> list = new ArrayList<>();
        helper(list,root);
        return list;
    }
}
