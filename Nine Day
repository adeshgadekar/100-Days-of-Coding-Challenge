Rotate Bits
Given an integer N and an integer D, rotate the binary representation of the integer N by D digits to the left as well as right and return the results in their decimal representation after each of the rotation.
Note: Integer N is stored using 16 bits. i.e. 12 will be stored as 0000000000001100.

Example 1:

Input:
N = 28, D = 2
Output:
112
7
Explanation: 
28 in Binary is: 0000000000011100
Rotating left by 2 positions, it becomes 0000000001110000 = 112 (in decimal).
Rotating right by 2 positions, it becomes 0000000000000111 = 7 (in decimal).
Example 2:

Input: 
N = 29, D = 2
Output: 
116
16391
Explanation: 
29 in Binary is: 0000000000011101
Rotating left by 2 positions, it becomes 0000000001110100 = 116 (in decimal).
Rotating right by 2 positions, it becomes 100000000000111 = 16391 (in decimal).


Solution :

class Solution
{
    
    ArrayList<Integer> rotate(int N, int D)
    {
        ArrayList<Integer> list = new ArrayList<>();
        D = D%16;
        int l = (N<<D | N>>(16-D))&65535;
        int r = (N>>D | N<<(16-D))&65535;
        list.add(l);
        list.add(r);
        return list;
    }
}

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


Third largest element

Given an array of distinct elements. Find the third largest element in it.

Suppose you have A[] = {1, 2, 3, 4, 5, 6, 7}, its output will be 5 because it is the 3 largest element in the array A.

Example 1:

Input:
N = 5
A[] = {2,4,1,3,5}
Output: 3
Example 2:

Input:
N = 2
A[] = {10,2}
Output: -1


Solution : 

class Solution
{
    int thirdLargest(int a[], int n)
    {
	    int max = Math.max(a[0],a[1]);
	    int secondmax=Math.min(a[0],a[1]);
	    int thirdmax=Integer.MIN_VALUE;
	    for(int i=2;i<n;i++){
	        if(a[i] > thirdmax)
	            thirdmax= a[i];
	        if(a[i] > secondmax){
	            thirdmax = secondmax;
	            secondmax = a[i];
	        }
	        if(a[i] > max){
	            secondmax = max;
	            max= a[i];
	        }
	    }
	    return thirdmax;
    }
}
