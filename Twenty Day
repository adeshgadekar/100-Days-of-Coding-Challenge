Inorder Traversal
Given a Binary Tree, find the In-Order Traversal of it.

Example 1:

Input:
       1
     /  \
    3    2
Output: 3 1 2

Example 2:

Input:
        10
     /      \ 
    20       30 
  /    \    /
 40    60  50
Output: 40 20 60 10 50 30.


Solution : 

class Solution {
    static void helper(ArrayList<Integer> list , Node root){
        if(root == null)return;
        helper(list,root.left);
        list.add(root.data);
        helper(list,root.right);
        return;
    }
    ArrayList<Integer> inOrder(Node root) {
        ArrayList<Integer> list = new ArrayList<>();
        helper(list,root);
        return list;
        
    }

}

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


Check If Circular Linked List

Given head, the head of a singly linked list, find if the linked list is circular or not. A linked list is called circular if it not NULL terminated and all nodes are connected in the form of a cycle. An empty linked list is considered as circular.

Note: The linked list does not contains any inner loop.

Example 1:

Input:
LinkedList: 1->2->3->4->5
(the first and last node is connected,
i.e. 5 --> 1)
Output: 1
Example 2:

Input:
LinkedList: 2->4->6->7->5->1
Output: 0. 


Solution : 

class GfG
{
    boolean isCircular(Node head)
    {
	    if(head==null || head.next==null) return false;
        Node temp=head.next;
        while(temp!=null){
            if(temp==head) return true;
            temp=temp.next;
        }
        return false;	
    }
}
