Insert in Middle of Linked List

Given a linked list of size N and a key. The task is to insert the key in the middle of the linked list.

Example 1:

Input:
LinkedList = 1->2->4
key = 3
Output: 1 2 3 4
Explanation: The new element is inserted
after the current middle element in the
linked list.
Example 2:

Input:
LinkedList = 10->20->40->50
key = 30
Output: 10 20 30 40 50
Explanation: The new element is inserted
after the current middle element in the
linked list and Hence, the output is
10 20 30 40 50.


Solution  : 

class Solution {
    
    public Node insertInMid(Node head, int data){
        int len=0,mid=0;
        Node curr=head;
        while(curr!=null){
            len++;
            curr=curr.next;
        }
        if(len%2!=0){
            mid=(len+1)/2;
        }
        else{
            mid=len/2;
        }
        mid=mid-1;
        Node curr2=head;
        while(mid!=0){
            curr2=curr2.next;
            mid--;
        }
        Node next=curr2.next;
        curr2.next=new Node(data);
        curr2.next.next=next;
        return head;
    }
}

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


Implement Queue using Linked List
BasicAccuracy: 45.6%Submissions: 87K+Points: 1
Hack you way to glory and win from a cash pool prize of INR 15,000. Register for free now

banner
Implement a Queue using Linked List. 
A Query Q is of 2 Types
(i) 1 x   (a query of this type means  pushing 'x' into the queue)
(ii) 2     (a query of this type means to pop an element from the queue and print the poped element)

Example 1:

Input:
Q = 5
Queries = 1 2 1 3 2 1 4 2
Output: 2 3
Explanation: n the first testcase
1 2 the queue will be {2}
1 3 the queue will be {2 3}
2   poped element will be 2 the
    queue will be {3}
1 4 the queue will be {3 4}
2   poped element will be 3.

Example 2:

Input:
Q = 4
Queries = 1 2 2 2 1 3 
Output: 2 -1
Explanation: In the second testcase 
1 2 the queue will be {2}
2   poped element will be {2} then
    the queue will be empty. 
2   the queue is empty and hence -1
1 3 the queue will be {3}.


Solution : 

class MyQueue
{
    QueueNode front, rear;
    
     void push(int a)
    {
        
        QueueNode newnode=new QueueNode(a);
        
        if(front==null){
            front=rear=newnode;
        }
        rear.next=newnode;
        rear=rear.next;
        
        
    }
    
    //Function to pop front element from the queue.
    int pop()
    {
        
        
        //Queue is empty
        if(front==null){
            return -1;
        }
        
        int top=front.data;
        
        //only one element
        if(rear==front){
            rear=front=null;
        }
        
        else{
            front=front.next;
        }
        return top;
        
    }
}
