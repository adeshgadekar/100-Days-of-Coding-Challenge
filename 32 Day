Node at a given index in linked list

Given a singly linked list with N nodes and a number X. The task is to find the node at the given index (X)(1 based index) of linked list. 

Input:
First line of input contains number of testcases T. For each testcase, first line of input contains space seperated two integers, length of linked list and X.

Output:
For each testcase, there will be single line of output containing data at Xth node.

User Task:
The task is to complete the function GetNth() which takes head reference and index as arguments and should return the data at Xth position in the linked list.

Constraints:
1 <= T <= 30
1 <= N <= 100
X <= N
1 <= value <= 103

Example:
Input:
2
6 5
1 2 3 4 657 76
10 2
8 7 10 8 6 1 20 91 21 2

Output:
657
7

Explanation:
Testcase 1: Element at 5th index in the linked list is 657 (1-based indexing).


Solution  : 


 class GfG
{
   
    public static int getNth(Node node, int ind)
    {
         Node current=node;
       int c=1;
       while(c<ind){
           c++;
           current=current.next;
       }
       return current.data;
    }
}


++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


Closest Number

Given  two integers N and M. The problem is to find the number closest to N and divisible by M. If there are more than one such number, then output the one having maximum absolute value.

 

Example 1:

Input:
N = 13 , M = 4
Output:
12
Explanation:
12 is the Closest Number to
13 which is divisible by 4.
Example 2:

Input:
N = -15 , M = 6
Output:
-18
Explanation:
-12 and -18 are both similarly close to
-15 and divisible by 6. but -18 has
the maximum absolute value.
So, Output is -18.

Solution  : 

class Solution {
    static int closestNumber(int N , int M) {
       int  rem = N % M;
            if(rem==0)//here if N<M then return N;
        {
            return N;
        }
        int i=N,j=N;//this two values is used to check forward and backword values
        while(true)
        {
            if(i%M==0)
            {
                return i;
            }else{
                i--;//here we come backword
            }
            
            if(j%M==0)
            {
                return j;
            }else{
                j++;//then we move forward
            }
        }
    }
};
