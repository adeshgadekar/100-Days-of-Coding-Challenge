Count number of hops

A frog jumps either 1, 2, or 3 steps to go to the top. In how many ways can it reach the top of Nth step. As the answer will be large find the answer modulo 1000000007.

Example 1:

Input:
N = 1
Output: 1
Example 2:

Input:
N = 4
Output: 7
Explanation:Below are the 7 ways to reach
4
1 step + 1 step + 1 step + 1 step
1 step + 2 step + 1 step
2 step + 1 step + 1 step
1 step + 1 step + 2 step
2 step + 2 step
3 step + 1 step
1 step + 3 step

Solution :

class Solution
{
    //Function to count the number of ways in which frog can reach the top.
    static long countWays(int n)
    {
        if(n==1) return 1;
        if(n==2) return 2;
        if(n==3) return 4;
        long a=1,b=2,c=4,ans=0;
        
        for(int i=4;i<=n; i++){
            ans = (a+b+c)%1000000007;
            a=b;
            b=c;
            c=ans;
        }
        
        return ans;
    }
    
}


+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


Almost Prime Numbers

 A no is said to be  k-Almost Prime Number if it  has exactly k prime factors (not necessary distinct). Your task is to complete the function printKAlmostPrimes which takes two argument k and N and prints the  first N numbers that are k prime. 


Input:
The first line of input is the no of test cases . Then T test cases follow . Each test case contains two integers k and N .

Output:
For each test case output will be N space separated first N numbers that are k prime numbers.

Example(To be used only for expected output):
Input
1
2 5

Output
4 6 9 10 14

Explanation
In above test case
4 has two prime factors, 2 x 2
6 has two prime factors, 2 x 3

Solution : 


class GfG {

    int countPrimeFactors(int number) {

        int count = 0;

        while(number%2==0) {

            count++;

            number /= 2;

        }

        

        for (int i = 3; i <= Math.sqrt(number); i+= 2) {

            while (number%i == 0) {

                count++;

                number /= i;

            }

        }

        if(number > 2) count++;

        return count;

    }

    void printKAlmostPrimes(int k, int N) {

        int count = 0;

        for(int i=2;i<Integer.MAX_VALUE && count < N;i++) {

            if(countPrimeFactors(i) == k) {

                System.out.print(i + " ");

                count++;

            }

        }

    }

}
